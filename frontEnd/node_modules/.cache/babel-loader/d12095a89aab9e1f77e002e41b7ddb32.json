{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micai\\\\Documents\\\\GitHub\\\\jif0359\\\\frontEnd\\\\src\\\\components\\\\header\\\\multiselect\\\\Multiselect.tsx\";\nimport React, { Component } from 'react';\nimport styles from './Multiselect.module.scss';\n/* modified from multiselect-dropdown-react\r\n * link: https://www.npmjs.com/package/multiselect-dropdown-react\r\n */\n\nexport class Multiselect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: [],\n      dropDownValue: []\n    };\n    this.checkBox = this.checkBox.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      dropDownValue: this.props.options\n    });\n  }\n\n  removeChip(value) {\n    this.checkBox(value, false);\n  }\n\n  checkBox(value, condition) {\n    let checkedValue = this.state.checked;\n\n    if (condition) {\n      checkedValue.push(value);\n    } else {\n      let index = checkedValue.indexOf(value);\n      checkedValue.splice(index, 1);\n    }\n\n    this.setState({\n      checked: checkedValue\n    }, () => {\n      this.props.onSelectOptions(this.state.checked);\n    });\n  }\n\n  searchFun(e) {\n    if (e.target.value.length !== 0) {\n      let enteredValue = e.target.value.toLowerCase();\n      let presentValue = this.props.options.filter(function (data) {\n        return data.name.indexOf(enteredValue) > -1;\n      });\n      this.setState({\n        dropDownValue: presentValue\n      });\n    } else {\n      this.setState({\n        dropDownValue: this.props.options\n      });\n    }\n  }\n\n  returnChip() {\n    const chip = this.state.checked ? this.state.checked.map((data, index) => React.createElement(\"div\", {\n      className: styles.chipBody,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: styles.chipText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \" \", data), React.createElement(\"button\", {\n      className: styles.chipClose,\n      onClick: e => this.removeChip(data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"\\xD7\"))) : [];\n    return chip;\n  }\n\n  returnList() {\n    const list = this.state.dropDownValue ? this.state.dropDownValue.map((data, index) => React.createElement(\"label\", {\n      className: styles.container,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, data.name, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: data.value,\n      onChange: e => this.checkBox(e.target.value, e.target.checked),\n      checked: this.state.checked.includes(data.value) ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.checkmark,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))) : null;\n    return list;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.multiselect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.chup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.returnChip()), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"Search\",\n      placeholder: this.props.placeholder,\n      className: styles.inputBox,\n      onChange: e => this.searchFun(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: styles.searchResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.listResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.returnList())));\n  }\n\n}\nexport default Multiselect;","map":{"version":3,"sources":["C:\\Users\\micai\\Documents\\GitHub\\jif0359\\frontEnd\\src\\components\\header\\multiselect\\Multiselect.tsx"],"names":["React","Component","styles","Multiselect","constructor","props","state","checked","dropDownValue","checkBox","bind","componentWillMount","setState","options","removeChip","value","condition","checkedValue","push","index","indexOf","splice","onSelectOptions","searchFun","e","target","length","enteredValue","toLowerCase","presentValue","filter","data","name","returnChip","chip","map","chipBody","chipText","chipClose","returnList","list","container","includes","checkmark","render","multiselect","chup","placeholder","inputBox","searchResult","listResult"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport styles from './Multiselect.module.scss';\r\n\r\n/* modified from multiselect-dropdown-react\r\n * link: https://www.npmjs.com/package/multiselect-dropdown-react\r\n */\r\n\r\ninterface IMultiselectState {\r\n    checked: any[],\r\n    dropDownValue: any[]\r\n}\r\n\r\ninterface IMultiselectProps {\r\n    options: any[],\r\n    placeholder: string,\r\n    onSelectOptions: (results: any) => void\r\n}\r\n\r\nexport class Multiselect extends Component<IMultiselectProps, IMultiselectState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checked: [],\r\n            dropDownValue: []\r\n        }\r\n        this.checkBox = this.checkBox.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        this.setState({\r\n            dropDownValue: this.props.options\r\n        });\r\n    }\r\n    removeChip(value: any) {\r\n        this.checkBox(value, false);\r\n    }\r\n    checkBox(value: any, condition: any) {\r\n        let checkedValue = this.state.checked;\r\n        if (condition) {\r\n            checkedValue.push(value);\r\n        } else {\r\n            let index = checkedValue.indexOf(value);\r\n            checkedValue.splice(index, 1);\r\n        }\r\n        this.setState({\r\n            checked: checkedValue\r\n        }, () => {\r\n            this.props.onSelectOptions(this.state.checked);\r\n        });\r\n    }\r\n    searchFun(e: any) {\r\n        if (e.target.value.length !== 0) {\r\n            let enteredValue = e.target.value.toLowerCase();\r\n            let presentValue = this.props.options.filter(function (data) {\r\n                return data.name.indexOf(enteredValue) > -1;\r\n            })\r\n            this.setState({ dropDownValue: presentValue })\r\n        } else {\r\n            this.setState({ dropDownValue: this.props.options })\r\n        }\r\n    }\r\n    returnChip() {\r\n        const chip = this.state.checked ? this.state.checked.map((data, index) =>\r\n            <div className={styles.chipBody} key={index}>\r\n                <p className={styles.chipText}> {data}</p>\r\n                <button className={styles.chipClose} onClick={e => this.removeChip(data)}>&times;</button>\r\n            </div>\r\n        ) : []\r\n        return chip;\r\n    }\r\n    returnList() {\r\n        const list = this.state.dropDownValue ? this.state.dropDownValue.map((data, index) =>\r\n            <label className={styles.container} key={index}>{data.name}\r\n                <input type=\"checkbox\" value={data.value} onChange={e => this.checkBox(e.target.value, e.target.checked)} checked={this.state.checked.includes(data.value) ? true : false} />\r\n                <span className={styles.checkmark}></span>\r\n            </label>\r\n        ) : null;\r\n        return list;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={styles.multiselect}>\r\n                <div className={styles.chup}>\r\n                    {this.returnChip()}\r\n                </div>\r\n                <input type=\"text\" name=\"Search\" placeholder={this.props.placeholder} className={styles.inputBox} onChange={e => this.searchFun(e)} />\r\n                <div className={styles.searchResult}>\r\n                    <div className={styles.listResult}>\r\n                        {this.returnList()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Multiselect;\r\n"]},"metadata":{},"sourceType":"module"}