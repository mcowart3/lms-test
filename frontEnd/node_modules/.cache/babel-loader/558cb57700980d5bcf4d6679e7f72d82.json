{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\micai\\\\Documents\\\\GitHub\\\\lms-test\\\\frontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\micai\\\\Documents\\\\GitHub\\\\lms-test\\\\frontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\micai\\\\Documents\\\\GitHub\\\\lms-test\\\\frontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\micai\\\\Documents\\\\GitHub\\\\lms-test\\\\frontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import LitDocument from\"../../model/LitDocument\";var LocalTagService=/*#__PURE__*/function(){function LocalTagService(){_classCallCheck(this,LocalTagService);}_createClass(LocalTagService,[{key:\"tagDocument\",value:function(){var _tagDocument=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(document,tag){var updatedDoc;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:3000/tag/\"+document.uniqueID.toString()+\"/\"+tag,{method:'POST',mode:'no-cors',headers:{'Content-Type':'application/json','Accept':'application/json'}});case 2:_context.next=4;return _context.sent.json();case 4:updatedDoc=_context.sent;console.log(document);updatedDoc=new LitDocument(document.uniqueID,document.author,document.text,document.title,undefined,undefined,document.tags);return _context.abrupt(\"return\",new Promise(function(resolve,reject){return resolve(updatedDoc);}));case 8:case\"end\":return _context.stop();}}},_callee);}));function tagDocument(_x,_x2){return _tagDocument.apply(this,arguments);}return tagDocument;}()}]);return LocalTagService;}();export{LocalTagService as default};","map":{"version":3,"sources":["C:/Users/micai/Documents/GitHub/lms-test/frontEnd/src/services/tagService/LocalTagService.ts"],"names":["LitDocument","LocalTagService","document","tag","fetch","uniqueID","toString","method","mode","headers","json","updatedDoc","console","log","author","text","title","undefined","tags","Promise","resolve","reject"],"mappings":"usBACA,MAAOA,CAAAA,WAAP,KAAwB,yBAAxB,C,GAEqBC,CAAAA,e,sOACjB,iBAAyBC,QAAzB,CAAgDC,GAAhD,uJACkCC,CAAAA,KAAK,CAC/B,6BAA+BF,QAAQ,CAACG,QAAT,CAAkBC,QAAlB,EAA/B,CAA8D,GAA9D,CAAoEH,GADrC,CAC0C,CACzEI,MAAM,CAAE,MADiE,CACzDC,IAAI,CAAE,SADmD,CACxCC,OAAO,CAAE,CACtC,eAAgB,kBADsB,CAEtC,SAAU,kBAF4B,CAD+B,CAD1C,CADvC,6CAOQC,IAPR,UACQC,UADR,eAQIC,OAAO,CAACC,GAAR,CAAYX,QAAZ,EACAS,UAAU,CAAG,GAAIX,CAAAA,WAAJ,CACTE,QAAQ,CAACG,QADA,CAETH,QAAQ,CAACY,MAFA,CAGTZ,QAAQ,CAACa,IAHA,CAITb,QAAQ,CAACc,KAJA,CAKTC,SALS,CAMTA,SANS,CAOTf,QAAQ,CAACgB,IAPA,CAAb,CATJ,gCAmBW,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,QAAqBD,CAAAA,OAAO,CAACT,UAAD,CAA5B,EAAZ,CAnBX,wD,uIADiBV,e","sourcesContent":["import ITagService from \"./ITagService\";\r\nimport LitDocument from \"../../model/LitDocument\";\r\n\r\nexport default class LocalTagService implements ITagService {\r\n    public async tagDocument(document: LitDocument, tag: string): Promise<LitDocument> {\r\n        let updatedDoc = await (await fetch(\r\n            \"http://localhost:3000/tag/\" + document.uniqueID.toString() + \"/\" + tag, {\r\n            method: 'POST', mode: 'no-cors', headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })).json();\r\n        console.log(document);\r\n        updatedDoc = new LitDocument(\r\n            document.uniqueID,\r\n            document.author,\r\n            document.text,\r\n            document.title,\r\n            undefined,\r\n            undefined,\r\n            document.tags\r\n        );\r\n\r\n        return new Promise((resolve, reject) => resolve(updatedDoc));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}