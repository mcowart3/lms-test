{"ast":null,"code":"import LitDocument from \"../../model/LitDocument\";\nexport default class LocalDocumentService {\n  async getDocuments() {\n    let documents = await (await fetch(\"http://localhost:3000/documents\", {\n      mode: 'no-cors'\n    })).json();\n    console.log(documents);\n    documents = documents.map(document => {\n      return new LitDocument(document._id, document.author, document.text, document.title, undefined, undefined, document.tags);\n    });\n    return new Promise((resolve, reject) => resolve(documents));\n  }\n\n  async sortDocuments(sortBy) {\n    let documents = await (await fetch(\"http://localhost:3000/sort/\" + sortBy.endpoint, {\n      mode: 'no-cors'\n    })).json();\n    console.log(documents);\n    documents = documents.map(document => {\n      return new LitDocument(document._id, document.author, document.text, document.title, undefined, undefined, document.tags);\n    });\n    return new Promise((resolve, reject) => resolve(documents));\n  }\n\n  async searchDocuments(query) {\n    let documents = await (await fetch(\"http://localhost:3000/search/\" + query, {\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })).json();\n    console.log(documents);\n    documents = documents.map(document => {\n      return new LitDocument(document._id, document.author, document.text, document.title, undefined, undefined, document.tags);\n    });\n    return new Promise((resolve, reject) => resolve(documents));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\micai\\Documents\\GitHub\\jif0359\\frontEnd\\src\\services\\documentService\\LocalDocumentService.ts"],"names":["LitDocument","LocalDocumentService","getDocuments","documents","fetch","mode","json","console","log","map","document","_id","author","text","title","undefined","tags","Promise","resolve","reject","sortDocuments","sortBy","endpoint","searchDocuments","query","headers"],"mappings":"AAEA,OAAOA,WAAP,MAAwB,yBAAxB;AAGA,eAAe,MAAMC,oBAAN,CAAuD;AACpE,QAAaC,YAAb,GAAoD;AAClD,QAAIC,SAAS,GAAG,MAAM,CAAC,MAAMC,KAAK,CAChC,iCADgC,EACG;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADH,CAAZ,EACqCC,IADrC,EAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAACM,GAAV,CAAcC,QAAQ,IAAI;AACpC,aAAO,IAAIV,WAAJ,CACLU,QAAQ,CAACC,GADJ,EAELD,QAAQ,CAACE,MAFJ,EAGLF,QAAQ,CAACG,IAHJ,EAILH,QAAQ,CAACI,KAJJ,EAKLC,SALK,EAMLA,SANK,EAOLL,QAAQ,CAACM,IAPJ,CAAP;AASD,KAVW,CAAZ;AAWA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAACf,SAAD,CAAxC,CAAP;AACD;;AAED,QAAaiB,aAAb,CAA2BC,MAA3B,EAAmE;AACjE,QAAIlB,SAAS,GAAG,MAAM,CAAC,MAAMC,KAAK,CAChC,gCAAgCiB,MAAM,CAACC,QADP,EACiB;AAAEjB,MAAAA,IAAI,EAAE;AAAR,KADjB,CAAZ,EACmDC,IADnD,EAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAACM,GAAV,CAAcC,QAAQ,IAAI;AACpC,aAAO,IAAIV,WAAJ,CACLU,QAAQ,CAACC,GADJ,EAELD,QAAQ,CAACE,MAFJ,EAGLF,QAAQ,CAACG,IAHJ,EAILH,QAAQ,CAACI,KAJJ,EAKLC,SALK,EAMLA,SANK,EAOLL,QAAQ,CAACM,IAPJ,CAAP;AASD,KAVW,CAAZ;AAWA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAACf,SAAD,CAAxC,CAAP;AACD;;AAED,QAAaoB,eAAb,CAA6BC,KAA7B,EAAoE;AAClE,QAAIrB,SAAS,GAAG,MAAM,CAAC,MAAMC,KAAK,CAChC,kCAAkCoB,KADF,EACS;AACzCnB,MAAAA,IAAI,EAAE,SADmC;AACxBoB,MAAAA,OAAO,EAAE;AACxB,wBAAgB,kBADQ;AAExB,kBAAU;AAFc;AADe,KADT,CAAZ,EAMlBnB,IANkB,EAAtB;AAOAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAACM,GAAV,CAAcC,QAAQ,IAAI;AACpC,aAAO,IAAIV,WAAJ,CACLU,QAAQ,CAACC,GADJ,EAELD,QAAQ,CAACE,MAFJ,EAGLF,QAAQ,CAACG,IAHJ,EAILH,QAAQ,CAACI,KAJJ,EAKLC,SALK,EAMLA,SANK,EAOLL,QAAQ,CAACM,IAPJ,CAAP;AASD,KAVW,CAAZ;AAWA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAACf,SAAD,CAAxC,CAAP;AACD;;AA1DmE","sourcesContent":["import IDocumentService from \"./IDocumentService\";\r\nimport Metadata from \"../../model/Metadata\";\r\nimport LitDocument from \"../../model/LitDocument\";\r\nimport SortBy from \"../../model/SortBy\";\r\n\r\nexport default class LocalDocumentService implements IDocumentService {\r\n  public async getDocuments(): Promise<LitDocument[]> {\r\n    let documents = await (await fetch(\r\n      \"http://localhost:3000/documents\", { mode: 'no-cors' })).json();\r\n    console.log(documents);\r\n    documents = documents.map(document => {\r\n      return new LitDocument(\r\n        document._id,\r\n        document.author,\r\n        document.text,\r\n        document.title,\r\n        undefined,\r\n        undefined,\r\n        document.tags\r\n      );\r\n    });\r\n    return new Promise((resolve, reject) => resolve(documents));\r\n  }\r\n\r\n  public async sortDocuments(sortBy: SortBy): Promise<LitDocument[]> {\r\n    let documents = await (await fetch(\r\n      \"http://localhost:3000/sort/\" + sortBy.endpoint, { mode: 'no-cors' })).json();\r\n    console.log(documents);\r\n    documents = documents.map(document => {\r\n      return new LitDocument(\r\n        document._id,\r\n        document.author,\r\n        document.text,\r\n        document.title,\r\n        undefined,\r\n        undefined,\r\n        document.tags\r\n      );\r\n    });\r\n    return new Promise((resolve, reject) => resolve(documents));\r\n  }\r\n\r\n  public async searchDocuments(query: string): Promise<LitDocument[]> {\r\n    let documents = await (await fetch(\r\n      \"http://localhost:3000/search/\" + query, {\r\n      mode: 'no-cors', headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      }\r\n    })).json();\r\n    console.log(documents);\r\n    documents = documents.map(document => {\r\n      return new LitDocument(\r\n        document._id,\r\n        document.author,\r\n        document.text,\r\n        document.title,\r\n        undefined,\r\n        undefined,\r\n        document.tags\r\n      );\r\n    });\r\n    return new Promise((resolve, reject) => resolve(documents));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}